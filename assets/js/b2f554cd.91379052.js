"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"js-cheatsheet-blog-post","metadata":{"permalink":"/blog/js-cheatsheet-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-03-js-cheatsheet-blog-post.md","source":"@site/blog/2023-03-03-js-cheatsheet-blog-post.md","title":"JS Cheatsheet Blog Post","description":"1 Array","date":"2023-03-03T00:00:00.000Z","formattedDate":"March 3, 2023","tags":[{"label":"JS","permalink":"/blog/tags/js"}],"readingTime":5.605,"hasTruncateMarker":false,"authors":[{"name":"Yihan","title":"Maintainer of amazingLychee","url":"https://github.com/amazingLychee","imageURL":"https://github.com/amazingLychee.png","key":"Yihan"}],"frontMatter":{"slug":"js-cheatsheet-blog-post","title":"JS Cheatsheet Blog Post","authors":"Yihan","tags":["JS"]},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"#### 1 Array\\n\\n##### 1.1 Array creation\\n\\n- Create a new array\\n\\n  `const A = [];`\\n\\n- Create a subarray\\n\\n  `const A = B.slice(l, r); // From idx l to r, r is not included`\\n\\n- Copy from other array\\n\\n  `const A = [...B];`\\n\\n- Create an array from a set\\n\\n  `const A = [...mySet];`\\n\\n- Create an array from a string\\n\\n  `const A = [...myStr];`\\n\\n- Create an array from hashmap keys\\n\\n  `const A = Object.keys(myMap);`\\n\\n- Create an array from hashmap values\\n\\n  `const A = Object.values(myMap);`\\n\\n- Create an array from hashmap keys and values\\n\\n  `const A = Object.entries(myMap);`\\n\\n- Create an array with length `m`\\n\\n  `const dp = Array(m);`\\n\\n- Create an array with length `m`, initialized as `0`\\n\\n  `const dp = Array(m).fill(0);`\\n\\n- Create a 2-D array with dimension `r x c`, initialized as `-1`\\n\\n  `const dp = Array.from(Array(r), () => Array(c).fill(-1));`\\n\\n##### 1.2 Array modification\\n\\n- Add an element\\n\\n  `A.push(x);`\\n\\n- Add all elements from other array\\n\\n  `A.push(...B);`\\n\\n- Add an element from left\\n\\n  `A.unshift(x);`\\n\\n- Pop an element\\n\\n  `A.pop();`\\n\\n- Pop an element from left\\n\\n  `A.shift();`\\n\\n- Remove/add element(s)\\n\\n  `A.splice(idx, deleteCnt, x); // in place`\\n\\n- Reverse an array\\n\\n  `A.reverse(); // in place`\\n\\n- Sort an array in increasing order\\n\\n  `A.sort((a, b) => a - b); // in place`\\n\\n- Other usages\\n\\n  `A.map(); A.filter(); A.every(); A.some();`\\n\\n#### 2 String\\n\\n- Create a string literal\\n\\n  `const s = \\"abcd\\";`\\n\\n- Create a string from other string\\n\\n  `const s1 = s2.substring(l, r); // From idx l to r, r is not included`\\n\\n- Create a string by joining an array\\n\\n  `const s = A.join(\\"\\");`\\n\\n- Create a string of repeating char\\n\\n  `const s = \\"xyz\\".repeat(5);`\\n\\n- Reverse a string\\n\\n  `const s1 = [...s2].reverse().join(\\"\\");`\\n\\n- Loop a string\\n\\n  `for (const char of s) {}`\\n\\n- Split a string\\n\\n  `const arr = s.split(\\" \\");`\\n\\n#### 3 Set\\n\\n- Create a new set\\n\\n  `const seen = new Set();`\\n\\n- Create a set from an array\\n\\n  `const seen = new Set(A);`\\n\\n- Add an element\\n\\n  `seen.add(x);`\\n\\n- Delete an element\\n\\n  `seen.delete(x);`\\n\\n#### 4 Hashtable (object)\\n\\n- Create a new hashtable\\n\\n  `const g = {};`\\n\\n- Add a key value pair\\n\\n  `g[a] = b;`\\n\\n- Delete a key\\n\\n  `delete g[a];`\\n\\n- Detect key exists\\n\\n  `if (key in g) {}`\\n\\n  `if (g[key]) {} // Only works if you know there is no falsy value`\\n\\n  `if (g[key] !== undefined) {}`\\n\\n- Loop through key value pair\\n\\n  `for (const [key, value] of Object.entries(g)) {}`\\n\\n#### 5 Heap\\n\\n- Create a min heap\\n\\n  `const minHeap = new Heap((a, b) => a - b);`\\n\\n- Create a max heap\\n\\n  `const maxHeap = new Heap((a, b) => b - a);`\\n\\n- Create a custom heap\\n\\n  `const heap = new Heap((a, b) => a[0] - b[0] ? a[0] - b[0] : a[1] - b[1]);`\\n\\n- Create a heap from an array\\n\\n  `minHeap.heapify(A);`\\n\\n- Add an element\\n\\n  `minHeap.add(x);`\\n\\n- Pop an element\\n\\n  `minHeap.pop();`\\n\\n- Peek an element\\n\\n  `minHeap.peek();`\\n\\n- Delete an element\\n\\n  `minHeap.delete(x);`\\n\\n- Heap implementation\\n\\n```js\\n  class Heap {   \\n      constructor(comparator) {     \\n            this.arr = [];     \\n            this.comparator = comparator;   \\n      }    \\n      \\n      getL() {     \\n            return this.arr.length;   \\n      } \\n\\n      getPIdx(i) {     \\n            return Math.floor((i - 1) / 2);   \\n      }    \\n         \\n      getLIdx(i) {     \\n            return 2 * i + 1;   \\n      }    \\n         \\n      getRIdx(i) {     \\n            return 2 * i + 2;   \\n      }    \\n         \\n      swap(i, j) {     \\n            [this.arr[i], this.arr[j]] = [this.arr[j], this.arr[i]];   \\n      }    \\n         \\n      peek() {     \\n            if (!this.arr.length) \\n                  return null;     \\n            return this.arr[0];   \\n      }    \\n         \\n      pop() {     \\n            if (!this.arr.length) \\n                  return null;     \\n            if (this.arr.length === 1) \\n                  return this.arr.pop();     \\n            const res = this.arr[0];     // Move last item from end to head     \\n            this.arr[0] = this.arr.pop();     \\n            this.heapifyDown();     \\n            return res;   \\n      }    \\n            \\n      add(n) {     \\n            this.arr.push(n);     \\n            this.heapifyUp();   \\n      }    // Default idx is the first idx   \\n            \\n      heapifyDown(idx = 0) {     \\n            let p = idx;     \\n            let c;     \\n            // Compare parent with its children and swap with target child if necessary     \\n      // Do it in a loop     \\n            while (this.getLIdx(p) < this.arr.length) {       \\n            // Get target child first       \\n                  if (this.getRIdx(p) < this.arr.length && this.comparator(this.arr[this.getRIdx(p)], this.arr[this.getLIdx(p)]) < 0)         \\n                        c = this.getRIdx(p);       \\n                  else \\n                        c = this.getLIdx(p);       \\n            // Compare with parent, if not valid, break       \\n                  if (this.comparator(this.arr[p], this.arr[c]) <= 0) \\n                        break;       \\n            // Swap       \\n                  this.swap(p, c);       \\n                  p = c;     \\n            }   \\n      }    \\n            // Default idx is the last idx   \\n      heapifyUp(idx = this.arr.length - 1) {     \\n            let c = idx;     \\n            let p = null;     \\n            // While has parent     \\n            while (c) {       \\n                  p = this.getPIdx(c);       \\n                  if (this.comparator(this.arr[p], this.arr[c]) <= 0) break;       \\n            // Swap       \\n                  this.swap(p, c);       \\n                  c = p;     \\n            }   \\n      }    \\n            \\n      heapify(A) {     // Bottom up     // Heapify down each item     \\n            this.arr = A;     \\n            for (let i = Math.floor(A.length / 2); i >= 0; i--) {       \\n                  this.heapifyDown(i);     \\n            }   \\n      }    \\n            \\n      delete(n) {     \\n            const idx = this.arr.indexOf(n);     \\n            this.arr[idx] = this.arr[this.arr.length - 1];     \\n            this.arr.pop();     \\n            this.heapifyDown(idx);   \\n      }\\n}\\n```\\n\\n#### 6 Union find\\n\\n```js\\nclass DS {   \\n      constructor(n) {     \\n            this.root = [...Array(n + 1).keys()];     \\n            this.rank = Array(n + 1).fill(0);   \\n      }   \\n\\n      find(i) {     \\n            if (i !== this.root[i]) \\n                  this.root[i] = this.find(this.root[i]);     \\n            return this.root[i];   \\n      }   \\n\\n      union(i, j) {     \\n            const [root1, root2] = [this.find(i), this.find(j)];     \\n            if (root1 === root2) \\n                  return false;     \\n            if (this.rank[root1] > this.rank[root2]) \\n                  this.root[root2] = root1;     \\n            else if (this.rank[root1] < this.rank[root2]) \\n                  this.root[root1] = root2;     \\n            else {       \\n                  this.root[root2] = root1;       this.rank[root1]++;     \\n            }     \\n            return true;   \\n      } \\n}\\n```\\n\\n#### 7 Trie\\n\\n```js\\n// Construct a trie from W (W is an array of words) \\nconst trie = {}; \\nW.forEach((w) => {   \\n      let node = trie;   \\n\\n      for (const c of w) {     \\n            if (!node[c]) \\n            node[c] = {};     \\n            node = node[c];   \\n      }   \\n\\n      node.end = true; \\n});\\n```\\n\\n#### 8 Monotonic queue e.g. 239-sliding-window-maximum\\n\\n```js\\nconst maxSlidingWindow = (A, k) => {   \\n      const win = []; // Store idx  \\n      const res = [];   \\n\\n      for (let i = 0; i < A.length; i++) {     \\n      // Need to get max from win[0], so keep an descending queue     \\n      while (win.length && A[win[win.length - 1]] <= A[i]) \\n            win.pop();     \\n            win.push(i);     \\n      // Remove first element if it\'s out of window     \\n      if (win[0] === i - k) \\n            win.shift();     \\n      if (i >= k - 1) \\n            res.push(A[win[0]]);   \\n      }   \\n      return res; \\n};\\n```\\n\\n#### 9 Quick sort/select\\n\\n```js\\nconst partition = (A, l, r) => {   \\n      let j = l;   \\n      let boundary = A[r];   \\n\\n      for (let i = l; i < r; i++) {     \\n            if (A[i] < boundary) {       \\n                  [A[i], A[j]] = [A[j], A[i]];       \\n                  j++;     \\n            }   \\n      }   \\n      [A[j], A[r]] = [A[r], A[j]];   \\n      return j; \\n};  \\n\\nconst quickSort = (A, l, r) => {   \\n      if (r <= l) return; \\n        \\n      const idx = partition(A, l, r);   \\n      quickSort(A, l, idx - 1);   \\n      quickSort(A, idx + 1, r);   \\n      return A; \\n};\\n```\\n\\n#### 10 Bianry index tree\\n\\n```js\\nclass BIT {   \\n      constructor(n) {     \\n            this.pre = Array(n + 1).fill(0);   \\n      }   \\n\\n      update(i, delta) {     \\n            while (i < this.pre.length) {       \\n                  this.pre[i] += delta;       \\n                  i += i & -i;     \\n            }   \\n      }  \\n                        \\n      getSum(i) {     \\n            let res = 0;     \\n            while (i) {       \\n                  res += this.pre[i];       \\n                  i -= i & -i;     \\n            }     \\n            return res;   \\n      } \\n}\\n```"},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-26-welcome/index.md","source":"@site/blog/2021-08-26-welcome/index.md","title":"Welcome","description":"Docusaurus blogging features are powered by the blog plugin.","date":"2021-08-26T00:00:00.000Z","formattedDate":"August 26, 2021","tags":[{"label":"facebook","permalink":"/blog/tags/facebook"},{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.405,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"},{"name":"Yangshun Tay","title":"Front End Engineer @ Facebook","url":"https://github.com/yangshun","imageURL":"https://github.com/yangshun.png","key":"yangshun"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["slorber","yangshun"],"tags":["facebook","hello","docusaurus"]},"prevItem":{"title":"JS Cheatsheet Blog Post","permalink":"/blog/js-cheatsheet-blog-post"},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\\n\\nSimply add Markdown files (or folders) to the `blog` directory.\\n\\nRegular blog authors can be added to `authors.yml`.\\n\\nThe blog post date can be extracted from filenames, such as:\\n\\n- `2019-05-30-welcome.md`\\n- `2019-05-30-welcome/index.md`\\n\\nA blog post folder can be convenient to co-locate blog post images:\\n\\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\\n\\nThe blog supports tags as well!\\n\\n**And if you don\'t want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"hasTruncateMarker":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\n\\n:::tip\\n\\nUse the power of React to create interactive blog posts.\\n\\n```js\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n```\\n\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\n\\n:::"},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"hasTruncateMarker":true,"authors":[{"name":"Yihan","title":"Maintainer of amazingLychee","url":"https://github.com/amazingLychee","imageURL":"https://github.com/amazingLychee.png","key":"Yihan"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"Yihan","tags":["hello","docusaurus"]},"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\n\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\n\\n\x3c!--truncate--\x3e\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\n\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet. \u4eca\u5929\u662f2024.6.25","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.14,"hasTruncateMarker":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"]},"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet. \u4eca\u5929\u662f2024.6.25"}]}')}}]);