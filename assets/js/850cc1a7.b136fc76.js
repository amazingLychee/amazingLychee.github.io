"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9017],{2724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var l=t(4848),i=t(8453);const s={},a="Fast and Slow Pointers in Linked Lists",d={id:"leetcode/fast-slow-pointers",title:"Fast and Slow Pointers in Linked Lists",description:"1. Overview",source:"@site/docs/01-leetcode/05-fast-slow-pointers.md",sourceDirName:"01-leetcode",slug:"/leetcode/fast-slow-pointers",permalink:"/docs/leetcode/fast-slow-pointers",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01-leetcode/05-fast-slow-pointers.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"String Cheatsheet",permalink:"/docs/leetcode/string"},next:{title:"\u6808\u7ecf\u5178\u9898\u76ee",permalink:"/docs/leetcode/stack-queue"}},o={},c=[{value:"1. Overview",id:"1-overview",level:2},{value:"Common Use Cases",id:"common-use-cases",level:3},{value:"2. Fast and Slow Pointers for Cycle Detection (Floyd\u2019s Cycle-Finding Algorithm)",id:"2-fast-and-slow-pointers-for-cycle-detection-floyds-cycle-finding-algorithm",level:2},{value:"Implementation",id:"implementation",level:3},{value:"Explanation",id:"explanation",level:3},{value:"3. Finding the Middle of the Linked List",id:"3-finding-the-middle-of-the-linked-list",level:2},{value:"Implementation",id:"implementation-1",level:3},{value:"Explanation",id:"explanation-1",level:3},{value:"Example Usage",id:"example-usage",level:3},{value:"4. Finding the Start of the Cycle",id:"4-finding-the-start-of-the-cycle",level:2},{value:"Implementation",id:"implementation-2",level:3},{value:"Explanation",id:"explanation-2",level:3},{value:"5. Calculating the Length of a Cycle",id:"5-calculating-the-length-of-a-cycle",level:2},{value:"Implementation",id:"implementation-3",level:3},{value:"Explanation",id:"explanation-3",level:3},{value:"6. Usage Examples",id:"6-usage-examples",level:2},{value:"Cycle Detection",id:"cycle-detection",level:3},{value:"Finding the Start of the Cycle",id:"finding-the-start-of-the-cycle",level:3},{value:"Finding Cycle Length",id:"finding-cycle-length",level:3}];function r(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"fast-and-slow-pointers-in-linked-lists",children:"Fast and Slow Pointers in Linked Lists"})}),"\n",(0,l.jsx)(n.h2,{id:"1-overview",children:"1. Overview"}),"\n",(0,l.jsx)(n.p,{children:"The fast and slow pointers technique involves using two pointers that traverse the linked list at different speeds:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Slow pointer"})," moves one step at a time."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fast pointer"})," moves two steps at a time."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"common-use-cases",children:"Common Use Cases"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cycle Detection"}),": To check if the linked list contains a cycle (loop)."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Finding the Middle Node"}),": To find the middle element of the linked list in a single traversal."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Cycle Length"}),": To determine the length of the cycle if one exists."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"2-fast-and-slow-pointers-for-cycle-detection-floyds-cycle-finding-algorithm",children:"2. Fast and Slow Pointers for Cycle Detection (Floyd\u2019s Cycle-Finding Algorithm)"}),"\n",(0,l.jsx)(n.h3,{id:"implementation",children:"Implementation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def has_cycle(head):\nslow = head\nfast = head\n\nwhile fast and fast.next:\nslow = slow.next        # Move slow pointer by 1\nfast = fast.next.next   # Move fast pointer by 2\n\n        if slow == fast:        # Cycle detected\n            return True\n\nreturn False\n"})}),"\n",(0,l.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"fast"})," pointer moves two steps, and the ",(0,l.jsx)(n.code,{children:"slow"})," pointer moves one step at a time."]}),"\n",(0,l.jsx)(n.li,{children:"If there is a cycle, the fast pointer will eventually meet the slow pointer inside the cycle."}),"\n",(0,l.jsxs)(n.li,{children:["If there is no cycle, the fast pointer will reach the end of the list (",(0,l.jsx)(n.code,{children:"None"}),")."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"3-finding-the-middle-of-the-linked-list",children:"3. Finding the Middle of the Linked List"}),"\n",(0,l.jsx)(n.h3,{id:"implementation-1",children:"Implementation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def find_middle(head):\nslow = head\nfast = head\n\nwhile fast and fast.next:\nslow = slow.next        # Move slow pointer by 1\nfast = fast.next.next   # Move fast pointer by 2\n\nreturn slow  # Slow pointer will be at the middle when fast reaches the end\n"})}),"\n",(0,l.jsx)(n.h3,{id:"explanation-1",children:"Explanation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["The ",(0,l.jsx)(n.code,{children:"fast"})," pointer moves at double the speed of the ",(0,l.jsx)(n.code,{children:"slow"})," pointer."]}),"\n",(0,l.jsxs)(n.li,{children:["When the ",(0,l.jsx)(n.code,{children:"fast"})," pointer reaches the end of the list, the ",(0,l.jsx)(n.code,{children:"slow"})," pointer will be at the middle."]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"example-usage",children:"Example Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Creating a linked list: 1 -> 2 -> 3 -> 4 -> 5\nllist = LinkedList()\nllist.insert_at_end(1)\nllist.insert_at_end(2)\nllist.insert_at_end(3)\nllist.insert_at_end(4)\nllist.insert_at_end(5)\n\n# Finding the middle node\nmiddle_node = find_middle(llist.head)\nprint(middle_node.data)  # Output: 3\n"})}),"\n",(0,l.jsx)(n.h2,{id:"4-finding-the-start-of-the-cycle",children:"4. Finding the Start of the Cycle"}),"\n",(0,l.jsx)(n.p,{children:"If a cycle is detected, you can use the fast and slow pointers to find the cycle's start node."}),"\n",(0,l.jsx)(n.h3,{id:"implementation-2",children:"Implementation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def find_cycle_start(head):\nslow = head\nfast = head\nhas_cycle = False\n\n    # First, detect if there is a cycle\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            has_cycle = True\n            break\n\n    # If there is no cycle, return None\n    if not has_cycle:\n        return None\n\n    # Find the start of the cycle\n    slow = head\n    while slow != fast:\n        slow = slow.next\n        fast = fast.next\n\n    return slow  # The start of the cycle\n"})}),"\n",(0,l.jsx)(n.h3,{id:"explanation-2",children:"Explanation"}),"\n",(0,l.jsx)(n.p,{children:"Detect if there is a cycle using the fast and slow pointers.\nIf a cycle is detected:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Move one pointer to the head of the list."}),"\n",(0,l.jsx)(n.li,{children:"Move both pointers one step at a time."}),"\n",(0,l.jsx)(n.li,{children:"The node where they meet is the start of the cycle."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"5-calculating-the-length-of-a-cycle",children:"5. Calculating the Length of a Cycle"}),"\n",(0,l.jsx)(n.p,{children:"If a cycle is detected, you can calculate its length."}),"\n",(0,l.jsx)(n.h3,{id:"implementation-3",children:"Implementation"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"def cycle_length(head):\nslow = head\nfast = head\nhas_cycle = False\n\n    # First, detect if there is a cycle\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            has_cycle = True\n            break\n\n    # If there is no cycle, return 0\n    if not has_cycle:\n        return 0\n\n    # Calculate the length of the cycle\n    current = slow\n    length = 0\n    while True:\n        current = current.next\n        length += 1\n        if current == slow:\n            break\n\n    return length\n"})}),"\n",(0,l.jsx)(n.h3,{id:"explanation-3",children:"Explanation"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"After detecting a cycle, keep traversing the cycle until you return to the starting point to count its length."}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"6-usage-examples",children:"6. Usage Examples"}),"\n",(0,l.jsx)(n.h3,{id:"cycle-detection",children:"Cycle Detection"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"# Creating a linked list with a cycle\nllist = LinkedList()\nllist.insert_at_end(1)\nllist.insert_at_end(2)\nllist.insert_at_end(3)\nllist.insert_at_end(4)\n\n# Creating a cycle (4 -> 2)\nllist.head.next.next.next.next = llist.head.next\n\nprint(has_cycle(llist.head))  # Output: True\n"})}),"\n",(0,l.jsx)(n.h3,{id:"finding-the-start-of-the-cycle",children:"Finding the Start of the Cycle"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"cycle_start_node = find_cycle_start(llist.head)\nprint(cycle_start_node.data)  # Output: 2\n"})}),"\n",(0,l.jsx)(n.h3,{id:"finding-cycle-length",children:"Finding Cycle Length"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"length_of_cycle = cycle_length(llist.head)\nprint(length_of_cycle)  # Output: 3\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(r,{...e})}):r(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>d});var l=t(6540);const i={},s=l.createContext(i);function a(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);