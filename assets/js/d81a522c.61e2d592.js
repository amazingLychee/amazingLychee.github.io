"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},k="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),k=m(n),u=r,c=k["".concat(o,".").concat(u)]||k[u]||d[u]||i;return n?a.createElement(c,p(p({ref:t},s),{},{components:n})):a.createElement(c,p({ref:t},s))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,p=new Array(i);p[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[k]="string"==typeof e?e:r,p[1]=l;for(var m=2;m<i;m++)p[m]=n[m];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7056:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const i={slug:"js-cheatsheet-blog-post",title:"JS Cheatsheet Blog Post",authors:"Yihan",tags:["JS"]},p="File with heading",l={permalink:"/blog/js-cheatsheet-blog-post",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-03-js-cheatsheet-blog-post.md",source:"@site/blog/2023-03-03-js-cheatsheet-blog-post.md",title:"JS Cheatsheet Blog Post",description:"1 Array",date:"2023-03-03T00:00:00.000Z",formattedDate:"March 3, 2023",tags:[{label:"JS",permalink:"/blog/tags/js"}],readingTime:5.605,hasTruncateMarker:!1,authors:[{name:"Yihan",title:"Maintainer of amazingLychee",url:"https://github.com/amazingLychee",imageURL:"https://github.com/amazingLychee.png",key:"Yihan"}],frontMatter:{slug:"js-cheatsheet-blog-post",title:"JS Cheatsheet Blog Post",authors:"Yihan",tags:["JS"]},nextItem:{title:"Welcome",permalink:"/blog/welcome"}},o={authorsImageUrls:[void 0]},m=[{value:"1 Array",id:"1-array",level:4},{value:"1.1 Array creation",id:"11-array-creation",level:5},{value:"1.2 Array modification",id:"12-array-modification",level:5},{value:"2 String",id:"2-string",level:4},{value:"3 Set",id:"3-set",level:4},{value:"4 Hashtable (object)",id:"4-hashtable-object",level:4},{value:"5 Heap",id:"5-heap",level:4},{value:"6 Union find",id:"6-union-find",level:4},{value:"7 Trie",id:"7-trie",level:4},{value:"8 Monotonic queue e.g. 239-sliding-window-maximum",id:"8-monotonic-queue-eg-239-sliding-window-maximum",level:4},{value:"9 Quick sort/select",id:"9-quick-sortselect",level:4},{value:"10 Bianry index tree",id:"10-bianry-index-tree",level:4}],s={toc:m},k="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(k,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h4",{id:"1-array"},"1 Array"),(0,r.kt)("h5",{id:"11-array-creation"},"1.1 Array creation"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a new array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = [];"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a subarray"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = B.slice(l, r); // From idx l to r, r is not included"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Copy from other array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = [...B];"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array from a set"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = [...mySet];"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array from a string"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = [...myStr];"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array from hashmap keys"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = Object.keys(myMap);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array from hashmap values"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = Object.values(myMap);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array from hashmap keys and values"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const A = Object.entries(myMap);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array with length ",(0,r.kt)("inlineCode",{parentName:"p"},"m")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const dp = Array(m);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create an array with length ",(0,r.kt)("inlineCode",{parentName:"p"},"m"),", initialized as ",(0,r.kt)("inlineCode",{parentName:"p"},"0")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const dp = Array(m).fill(0);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a 2-D array with dimension ",(0,r.kt)("inlineCode",{parentName:"p"},"r x c"),", initialized as ",(0,r.kt)("inlineCode",{parentName:"p"},"-1")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const dp = Array.from(Array(r), () => Array(c).fill(-1));")))),(0,r.kt)("h5",{id:"12-array-modification"},"1.2 Array modification"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.push(x);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add all elements from other array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.push(...B);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add an element from left"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.unshift(x);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Pop an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.pop();"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Pop an element from left"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.shift();"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Remove/add element(s)"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.splice(idx, deleteCnt, x); // in place"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Reverse an array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.reverse(); // in place"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Sort an array in increasing order"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.sort((a, b) => a - b); // in place"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Other usages"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"A.map(); A.filter(); A.every(); A.some();")))),(0,r.kt)("h4",{id:"2-string"},"2 String"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a string literal"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'const s = "abcd";'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a string from other string"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const s1 = s2.substring(l, r); // From idx l to r, r is not included"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a string by joining an array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'const s = A.join("");'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a string of repeating char"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'const s = "xyz".repeat(5);'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Reverse a string"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'const s1 = [...s2].reverse().join("");'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Loop a string"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"for (const char of s) {}"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Split a string"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'const arr = s.split(" ");')))),(0,r.kt)("h4",{id:"3-set"},"3 Set"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a new set"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const seen = new Set();"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a set from an array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const seen = new Set(A);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"seen.add(x);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Delete an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"seen.delete(x);")))),(0,r.kt)("h4",{id:"4-hashtable-object"},"4 Hashtable (object)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a new hashtable"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const g = {};"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add a key value pair"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"g[a] = b;"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Delete a key"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"delete g[a];"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Detect key exists"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"if (key in g) {}")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"if (g[key]) {} // Only works if you know there is no falsy value")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"if (g[key] !== undefined) {}"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Loop through key value pair"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"for (const [key, value] of Object.entries(g)) {}")))),(0,r.kt)("h4",{id:"5-heap"},"5 Heap"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a min heap"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const minHeap = new Heap((a, b) => a - b);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a max heap"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const maxHeap = new Heap((a, b) => b - a);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a custom heap"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"const heap = new Heap((a, b) => a[0] - b[0] ? a[0] - b[0] : a[1] - b[1]);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Create a heap from an array"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"minHeap.heapify(A);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"minHeap.add(x);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Pop an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"minHeap.pop();"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Peek an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"minHeap.peek();"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Delete an element"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"minHeap.delete(x);"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Heap implementation"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"  class Heap {   \n      constructor(comparator) {     \n            this.arr = [];     \n            this.comparator = comparator;   \n      }    \n      \n      getL() {     \n            return this.arr.length;   \n      } \n\n      getPIdx(i) {     \n            return Math.floor((i - 1) / 2);   \n      }    \n         \n      getLIdx(i) {     \n            return 2 * i + 1;   \n      }    \n         \n      getRIdx(i) {     \n            return 2 * i + 2;   \n      }    \n         \n      swap(i, j) {     \n            [this.arr[i], this.arr[j]] = [this.arr[j], this.arr[i]];   \n      }    \n         \n      peek() {     \n            if (!this.arr.length) \n                  return null;     \n            return this.arr[0];   \n      }    \n         \n      pop() {     \n            if (!this.arr.length) \n                  return null;     \n            if (this.arr.length === 1) \n                  return this.arr.pop();     \n            const res = this.arr[0];     // Move last item from end to head     \n            this.arr[0] = this.arr.pop();     \n            this.heapifyDown();     \n            return res;   \n      }    \n            \n      add(n) {     \n            this.arr.push(n);     \n            this.heapifyUp();   \n      }    // Default idx is the first idx   \n            \n      heapifyDown(idx = 0) {     \n            let p = idx;     \n            let c;     \n            // Compare parent with its children and swap with target child if necessary     \n      // Do it in a loop     \n            while (this.getLIdx(p) < this.arr.length) {       \n            // Get target child first       \n                  if (this.getRIdx(p) < this.arr.length && this.comparator(this.arr[this.getRIdx(p)], this.arr[this.getLIdx(p)]) < 0)         \n                        c = this.getRIdx(p);       \n                  else \n                        c = this.getLIdx(p);       \n            // Compare with parent, if not valid, break       \n                  if (this.comparator(this.arr[p], this.arr[c]) <= 0) \n                        break;       \n            // Swap       \n                  this.swap(p, c);       \n                  p = c;     \n            }   \n      }    \n            // Default idx is the last idx   \n      heapifyUp(idx = this.arr.length - 1) {     \n            let c = idx;     \n            let p = null;     \n            // While has parent     \n            while (c) {       \n                  p = this.getPIdx(c);       \n                  if (this.comparator(this.arr[p], this.arr[c]) <= 0) break;       \n            // Swap       \n                  this.swap(p, c);       \n                  c = p;     \n            }   \n      }    \n            \n      heapify(A) {     // Bottom up     // Heapify down each item     \n            this.arr = A;     \n            for (let i = Math.floor(A.length / 2); i >= 0; i--) {       \n                  this.heapifyDown(i);     \n            }   \n      }    \n            \n      delete(n) {     \n            const idx = this.arr.indexOf(n);     \n            this.arr[idx] = this.arr[this.arr.length - 1];     \n            this.arr.pop();     \n            this.heapifyDown(idx);   \n      }\n}\n")),(0,r.kt)("h4",{id:"6-union-find"},"6 Union find"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class DS {   \n      constructor(n) {     \n            this.root = [...Array(n + 1).keys()];     \n            this.rank = Array(n + 1).fill(0);   \n      }   \n\n      find(i) {     \n            if (i !== this.root[i]) \n                  this.root[i] = this.find(this.root[i]);     \n            return this.root[i];   \n      }   \n\n      union(i, j) {     \n            const [root1, root2] = [this.find(i), this.find(j)];     \n            if (root1 === root2) \n                  return false;     \n            if (this.rank[root1] > this.rank[root2]) \n                  this.root[root2] = root1;     \n            else if (this.rank[root1] < this.rank[root2]) \n                  this.root[root1] = root2;     \n            else {       \n                  this.root[root2] = root1;       this.rank[root1]++;     \n            }     \n            return true;   \n      } \n}\n")),(0,r.kt)("h4",{id:"7-trie"},"7 Trie"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Construct a trie from W (W is an array of words) \nconst trie = {}; \nW.forEach((w) => {   \n      let node = trie;   \n\n      for (const c of w) {     \n            if (!node[c]) \n            node[c] = {};     \n            node = node[c];   \n      }   \n\n      node.end = true; \n});\n")),(0,r.kt)("h4",{id:"8-monotonic-queue-eg-239-sliding-window-maximum"},"8 Monotonic queue e.g. 239-sliding-window-maximum"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const maxSlidingWindow = (A, k) => {   \n      const win = []; // Store idx  \n      const res = [];   \n\n      for (let i = 0; i < A.length; i++) {     \n      // Need to get max from win[0], so keep an descending queue     \n      while (win.length && A[win[win.length - 1]] <= A[i]) \n            win.pop();     \n            win.push(i);     \n      // Remove first element if it's out of window     \n      if (win[0] === i - k) \n            win.shift();     \n      if (i >= k - 1) \n            res.push(A[win[0]]);   \n      }   \n      return res; \n};\n")),(0,r.kt)("h4",{id:"9-quick-sortselect"},"9 Quick sort/select"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const partition = (A, l, r) => {   \n      let j = l;   \n      let boundary = A[r];   \n\n      for (let i = l; i < r; i++) {     \n            if (A[i] < boundary) {       \n                  [A[i], A[j]] = [A[j], A[i]];       \n                  j++;     \n            }   \n      }   \n      [A[j], A[r]] = [A[r], A[j]];   \n      return j; \n};  \n\nconst quickSort = (A, l, r) => {   \n      if (r <= l) return; \n        \n      const idx = partition(A, l, r);   \n      quickSort(A, l, idx - 1);   \n      quickSort(A, idx + 1, r);   \n      return A; \n};\n")),(0,r.kt)("h4",{id:"10-bianry-index-tree"},"10 Bianry index tree"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"class BIT {   \n      constructor(n) {     \n            this.pre = Array(n + 1).fill(0);   \n      }   \n\n      update(i, delta) {     \n            while (i < this.pre.length) {       \n                  this.pre[i] += delta;       \n                  i += i & -i;     \n            }   \n      }  \n                        \n      getSum(i) {     \n            let res = 0;     \n            while (i) {       \n                  res += this.pre[i];       \n                  i -= i & -i;     \n            }     \n            return res;   \n      } \n}\n")))}d.isMDXComponent=!0}}]);